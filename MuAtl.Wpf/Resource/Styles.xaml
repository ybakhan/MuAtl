<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:local="clr-namespace:MuAtl"
                    xmlns:cnvrtr="clr-namespace:MuAtl.View.Util.Converter"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <Style x:Key="BtnStyle" TargetType="{x:Type Button}">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Margin" Value="5" />
    <Setter Property="Width" Value="Auto" />
  </Style>

  <Style x:Key="GridBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BtnStyle}">
    <Setter Property="Width" Value="60" />
  </Style>

  <Style x:Key="AddBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource GridBtnStyle}">
    <Setter Property="Content" Value="Add" />
  </Style>

  <Style x:Key="UpdateBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource GridBtnStyle}">
    <Setter Property="Content" Value="Update" />
  </Style>

  <Style x:Key="DeleteBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource GridBtnStyle}">
    <Setter Property="Content" Value="Delete" />
  </Style>

  <Style x:Key="FindBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource GridBtnStyle}">
    <Setter Property="Content" Value="Find" />
  </Style>

  <Style x:Key="PlusBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BtnStyle}">
    <Setter Property="Content" Value="+" />
    <Setter Property="Margin" Value="1,5,1,5" />
    <Setter Property="Width" Value="20" />
    <Setter Property="Content" Value="+" />
  </Style>

  <Style x:Key="DelBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource PlusBtnStyle}">
    <Setter Property="Content" Value="-" />
  </Style>

  <Style x:Key="AddDelStckPnlStyle" TargetType="{x:Type StackPanel}">
    <Setter Property="Orientation" Value="Horizontal" />
    <Setter Property="Margin" Value="0,0,5,0" />
    <Setter Property="HorizontalAlignment" Value="Right" />
  </Style>
  
  <Style x:Key="BrowseBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource AddBtnStyle}">
    <Setter Property="Width" Value="60" />
    <Setter Property="Content" Value="Browse" />
  </Style>
  
  <Style x:Key="TxtBlckStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Margin" Value="5" />
  </Style>

  <Style x:Key="BoldTxtBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TxtBlckStyle}">
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="TextWrapping" Value="Wrap" />
  </Style>

  <Style x:Key="SetupOrOpenTxtBlckStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BoldTxtBlockStyle}">
    <Setter Property="Text" Value="Setup MuATL project or Open existing project" />
  </Style>

  <Style x:Key="TxtBxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Width" Value="150" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Margin" Value="5" />
  </Style>

  <Style x:Key="TypeTxtBxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TxtBxStyle}">
    <Setter Property="Width" Value="180"/>
  </Style>

  <Style x:Key="PathTxtBxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TxtBxStyle}">
    <Setter Property="Width" Value="500" />
  </Style>
  
  <Style x:Key="CmBxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="Margin" Value="5" />
    <Setter Property="Width" Value="100" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />

  </Style>

  <Style x:Key="RuleCmBxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource CmBxStyle}">
    <Setter Property="Width" Value="460" />
  </Style>
  
  <Style x:Key="ChkBxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Margin" Value="5" />
    <Setter Property="Width" Value="100" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />

  </Style>

  <Style x:Key="RootLvlChckBxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="FontWeight" Value="Bold" />

  </Style>

  <Style x:Key="MutantTypeChkBxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ChkBxStyle}">
    <Setter Property="Width" Value="Auto" />
  </Style>

  <Style x:Key="GridBrdrStyle" TargetType="{x:Type Border}">
    <Setter Property="Margin" Value="5" />
    <Setter Property="BorderBrush" Value="Black"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Width" Value="1225" />
  </Style>
  
  <Style x:Key="RuleBrdrStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource GridBrdrStyle}">
    <Setter Property="Height" Value="250"/>
    <Setter Property="Width" Value="250"/>
  </Style>
  
  <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
    <Setter Property="Margin" Value="5" />
    <Setter Property="Width" Value="Auto" />
    <Setter  Property="SelectionMode" Value="Single" />
    <Setter  Property="CanUserAddRows" Value="False" />
    <Setter  Property="AutoGenerateColumns" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
  </Style>
  
  <Style x:Key="MuScrollViewStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
  </Style>

  <Style x:Key="ScrllStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter  Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Height" Value="675" />
    <Setter Property="Width" Value="1260" />
  </Style>
  
  <Style x:Key="ItemsControlStyle" TargetType="{x:Type ItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <ScrollViewer VerticalScrollBarVisibility="Auto" 
                        HorizontalScrollBarVisibility="Auto" Padding="{TemplateBinding Padding}">
            <ItemsPresenter />
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    
  </Style>
  
  <ControlTemplate x:Key="pathTbValTemplate">
    <StackPanel>
      <TextBlock Foreground="Red"
                 HorizontalAlignment="Right"
                 Text="{Binding ErrorContent}" 
                 Margin="0,0,0,5" />
      <Border BorderBrush="Red"
              BorderThickness="1"
              CornerRadius="2">
        <AdornedElementPlaceholder />
      </Border>
    </StackPanel>
  </ControlTemplate>

  <cnvrtr:CollectionCountToVisibilityConverter x:Key="cnvrtr"/>

  <!-- LightBrush is used for content areas such as Menu, Tab Control background -->
  <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0"/>
    <GradientStop Color="#EEE" Offset="1.0"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#CCC" Offset="0.0"/>
    <GradientStop Color="#444" Offset="1.0"/>
  </LinearGradientBrush>

  <!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
  <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#EEE" Offset="0.0"/>
    <GradientStop Color="#CCC" Offset="1.0"/>
  </LinearGradientBrush>

  <!-- Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control -->
  <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>
  
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
  <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
  <SolidColorBrush x:Key="GlyphBrush" Color="#444"/>

  <!--Simple TreeViewItem ToggleButton - + and - button to expand and collapse a TreeViewItem -->
  <Style x:Key="ToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="15" 
                  Height="13" 
                  Background="Transparent">

            <Path Visibility="Collapsed"
                    HorizontalAlignment="Left" 
						        Margin="1,1,1,1" 
                    x:Name="IsExpandedPath" 
						        VerticalAlignment="Center" 
						        Fill="{StaticResource GlyphBrush}"
						        Data="M 0 4 L 8 4 L 4 8 Z"/>

            <Path HorizontalAlignment="Left" 
                    Margin="1,1,1,1" 
                    x:Name="ExpandPath" 
                    VerticalAlignment="Center" 
                    Fill="{StaticResource GlyphBrush}" 
                    Data="M 4 0 L 8 4 L 4 8 Z"/>

          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="IsExpandedPath"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="ExpandPath"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
    
    <!--<Setter Property="Background" Value="{StaticResource LightBrush}"/>-->
    <!--<Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}"/>-->
    
    <Setter Property="Template">
      <Setter.Value>
        
        <ControlTemplate TargetType="{x:Type Expander}">

          <Grid>

            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*" x:Name="ContentRow"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" x:Name="Border" 
                 Background="{TemplateBinding Background}" 
							   BorderBrush="{TemplateBinding BorderBrush}" 
							   BorderThickness="{TemplateBinding BorderThickness}"  
                 CornerRadius="2,2,0,0" >

              <Grid>

                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="20"/>
                  <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <ToggleButton Style="{StaticResource ToggleStyle}" 
									  Background="{StaticResource NormalBrush}" 
									  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
									  OverridesDefaultStyle="True"/>

                <!-- Margin="4" -->
                <ContentPresenter Grid.Column="1" 
                                    
                                    RecognizesAccessKey="True" 
                                    ContentSource="Header"/>
              </Grid>

            </Border>

            <!-- Background="{StaticResource WindowBackgroundBrush}" 
                      BorderBrush="{StaticResource SolidBorderBrush}" -->
            
            <Border Visibility="Collapsed" 
                      Grid.Row="1" 
                      x:Name="ExpandSite"                       
                      BorderThickness="1,0,1,1" 
                      CornerRadius="0,0,2,2">

              <ContentPresenter 
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                  Margin="{TemplateBinding Padding}" 
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                  Focusable="false"/>

            </Border>

          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
            </Trigger>
            <!--<Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" 
                        Value="{StaticResource DisabledBackgroundBrush}" TargetName="Border"/>
              <Setter Property="BorderBrush" 
                        Value="{StaticResource DisabledBorderBrush}" TargetName="Border"/>
              <Setter Property="Foreground"
                        Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    
  </Style>
  
  <Style x:Key="GroupDataGridStyle" TargetType="{x:Type GroupItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupItem}">
          <Expander IsExpanded="True" 
                    Foreground="Black"
                    >
            <Expander.Header>
              <TextBlock Text="{Binding Name}" />
            </Expander.Header>
            <ItemsPresenter />
          </Expander>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>